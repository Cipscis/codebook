{"version":3,"file":"docs-script.bundle.js","mappings":"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","sources":["webpack://codebook/./src/codebook.ts","webpack://codebook/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["type CodebookSetArgs<Name extends string = string, Value = any> = Record<Name, Value>;\ninterface CodebookSet {\n\tblocks: HTMLElement[],\n\targs: CodebookSetArgs,\n}\n\nconst selectors = Object.freeze({\n\tblock: '.js-codebook__block',\n\tset: '.js-codebook__set',\n\n\tinert: '.js-codebook__inert',\n} as const);\n\nconst dataAttributes = Object.freeze({\n\tset: 'data-codebook-set',\n\tindex: 'data-codebook-index',\n\n\tlog: 'data-codebook-log',\n\thtml: 'data-codebook-html',\n} as const);\n\nconst defaultSetName = 'default';\n\n// Create a single textarea element for decoding HTML\nconst $textarea = document.createElement('textarea');\n\n/**\n * Run all Codebook blocks in all Codebook sets in order, with any specified external arguments made available.\n */\nexport function run(args?: CodebookSetArgs): Promise<void[]> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst sets = _createCodeSets(args);\n\t\tconst promises: Promise<any>[] = [];\n\n\t\tfor (let setName in sets) {\n\t\t\tconst set = sets[setName];\n\n\t\t\tpromises.push(_runSet(set));\n\t\t}\n\n\t\tPromise.all(promises)\n\t\t\t.then(resolve)\n\t\t\t.catch(reject);\n\t});\n}\n\n/**\n * Run all blocks in a specific Codebook set, with any specified external arguments made available.\n */\nexport async function runSet(setName: string, args?: CodebookSetArgs): Promise<void>\n/**\n * Run all blocks in the default Codebook set, with any specified external arguments made available.\n */\nexport async function runSet(args?: CodebookSetArgs): Promise<void>\nexport async function runSet(setNameOrArgs?: string | CodebookSetArgs, argsParam?: CodebookSetArgs): Promise<void> {\n\tlet setName: string;\n\tlet args: CodebookSetArgs | undefined = undefined;\n\n\t// Figure out which arguments were passed.\n\tif (typeof setNameOrArgs === 'string') {\n\t\tsetName = setNameOrArgs;\n\t\tif (argsParam) {\n\t\t\targs = argsParam;\n\t\t}\n\t } else {\n\t\t// If no set name was specified, use the default set name.\n\t\tsetName = defaultSetName;\n\t\tif (setNameOrArgs) {\n\t\t\targs = setNameOrArgs;\n\t\t}\n\t}\n\n\tconst sets = _createCodeSets(args);\n\n\tif (setName in sets) {\n\t\tconst set = sets[setName];\n\n\t\treturn _runSet(set);\n\t} else {\n\t\tthrow new RangeError(`Codebook: Cannot run unrecognised set '${setName}'`);\n\t}\n}\n\n/**\n * Adjust the indentation of Codebook sets so it appears correctly when viewed on a page.\n */\nexport function tidy() {\n\tconst $blocks = document.querySelectorAll(`${selectors.block}, ${selectors.inert}`);\n\n\tfor (let $block of $blocks) {\n\t\tconst code = $block.innerHTML;\n\t\t// Look for tab indentation only\n\t\tconst match = code.match(/^(\\t*)\\S/m);\n\n\t\tif (match) {\n\t\t\tconst indentation = match[1];\n\t\t\tconst level = indentation.length;\n\t\t\tconst pattern = new RegExp(`^\\\\t{${level}}`, 'gm');\n\n\t\t\t$block.innerHTML = code.replace(pattern, '').trim();\n\t\t}\n\t};\n}\n\n/**\n * Gathers all Codebook sets, and sorts blocks within their sets according to their index where applicable.\n */\nfunction _createCodeSets(args?: CodebookSetArgs) {\n\tconst sets = _gatherSetBlocks(args);\n\n\t// Loop through created sets and sort their blocks by index\n\tfor (let setName in sets) {\n\t\tconst set = sets[setName];\n\t\t_sortCodeBlocks(set);\n\t};\n\n\treturn sets;\n}\n\n/**\n * Gathers all Codebook blocks according to the order in which they appear in the markup,\n * and adds them to the set they belong to.\n */\nfunction _gatherSetBlocks(args?: CodebookSetArgs): Record<string, CodebookSet> {\n\tconst $blocks = document.querySelectorAll<HTMLElement>(selectors.block);\n\tconst setNames: string[] = [];\n\tconst sets: Record<string, CodebookSet> = {};\n\n\t// Loop through all elements and add them to the right set\n\tfor (let $block of $blocks) {\n\t\tconst setName = _getSetName($block);\n\t\tlet set: CodebookSet;\n\n\t\tif (setNames.includes(setName)) {\n\t\t\tset = sets[setName];\n\t\t} else {\n\t\t\tsetNames.push(setName);\n\n\t\t\tset = _createNewSet(args);\n\t\t\tsets[setName] = set;\n\t\t}\n\n\t\tset.blocks.push($block);\n\t};\n\n\treturn sets;\n}\n\n/**\n * Sorts Codebook blocks according to their index data attribute, if they have one.\n */\nfunction _sortCodeBlocks(set: CodebookSet) {\n\t// If any blocks have an explicit index, sort them\n\tset.blocks.sort(($blockA, $blockB) => {\n\t\tconst iA = $blockA.getAttribute(dataAttributes.index);\n\t\tconst iB = $blockB.getAttribute(dataAttributes.index);\n\n\t\tif (iA === iB) {\n\t\t\treturn 0; // Leave the order unchanged\n\t\t} else if (iA !== null && iB === null) {\n\t\t\treturn -1; // Put $blockA first\n\t\t} else if (iA === null && iB !== null) {\n\t\t\treturn +1; // Put $blockB first\n\t\t} else {\n\t\t\t// Neither index is null\n\t\t\treturn (+iA!) - (+iB!); // Put the code with the lower index first\n\t\t}\n\t});\n}\n\n/**\n * Creates a new Codebook set.\n */\nfunction _createNewSet(args?: CodebookSetArgs): CodebookSet {\n\targs = args || {};\n\n\treturn {\n\t\tblocks: [],\n\t\targs: Object.assign({}, args),\n\t};\n}\n\n/**\n * Clears a set's logs, then runs each block within it with the `log` and `html` utility functions available.\n */\nfunction _runSet(set: CodebookSet) {\n\tconst code = set.blocks.reduce(_combineCode, '');\n\n\t_clearLogs(set);\n\n\tconst args = set.args;\n\tconst [argNames, argValues] = _spreadArgs(args);\n\n\tconsole.log(argNames);\n\tif (\n\t\targNames.includes('_log') ||\n\t\targNames.includes('_$log') ||\n\t\targNames.includes('log') ||\n\t\targNames.includes('_html') ||\n\t\targNames.includes('_$html') ||\n\t\targNames.includes('html')\n\t) {\n\t\tthrow new Error(`Codebook: The following argument names are reserved and cannot be used:\\n'_log', '_$log', 'log', '_html', '_$html', 'html'`);\n\t}\n\n\tconst fnFactory = Function.apply(null, argNames.concat(['_log', '_html', `\n\t\treturn async () => {\n\t\t\t'use strict';\n\n\t\t\tlet _$log = null;\n\t\t\tlet log = function () {};\n\n\t\t\tlet _$html = null;\n\t\t\tlet html = function () {};\n\n\t\t\t${code}\n\t\t};\n\t`]));\n\n\tconst fn: () => Promise<any> = fnFactory.apply(null, argValues.concat([_logOutput, _htmlOutput]));\n\n\treturn fn();\n}\n\n/**\n * Clears the contents of all log elements for each block in a given Codebook set.\n */\nfunction _clearLogs(set: CodebookSet) {\n\tfor (let $block of set.blocks) {\n\t\tconst logId = $block.getAttribute(dataAttributes.log);\n\n\t\tif (logId) {\n\t\t\tconst $log = document.getElementById(`${logId}`);\n\n\t\t\tif ($log) {\n\t\t\t\t$log.innerHTML = '';\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Converts a CodebookSetArgs object into separate arrays of its arguments' names and values.\n */\nfunction _spreadArgs<Name extends string, Value extends any> (args: CodebookSetArgs<Name, Value>): [Name[], Value[]] {\n\tconst names: Name[] = Object.keys(args) as Name[];\n\tconst values: Value[] = Object.values(args);\n\n\treturn [\n\t\tnames,\n\t\tvalues,\n\t];\n}\n\n/**\n * To be used with `Array.prototype.reduce`, combines the code for all blocks within\n * a Codebook set and ensures the special `log` and `html` functions always have correct values.\n */\nfunction _combineCode(allCode: string, $newCode: HTMLElement) {\n\tlet newCode = _decodeHtml($newCode.textContent || '');\n\n\tconst logId = $newCode.getAttribute(dataAttributes.log);\n\tif (logId) {\n\t\tnewCode = `\n\t\t\t_$log = document.getElementById('${logId}');\n\t\t\tlog = function (...output) {\n\t\t\t\t_log(_$log, ...output);\n\t\t\t};\n\n\t\t\t${newCode}\n\n\t\t\tlog = function () {};\n\t\t`;\n\t}\n\n\tconst htmlId = $newCode.getAttribute(dataAttributes.html);\n\tif (htmlId) {\n\t\tnewCode = `\n\t\t\t_$html = document.getElementById('${htmlId}');\n\t\t\thtml = function (output) {\n\t\t\t\t_html(_$html, output);\n\t\t\t};\n\n\t\t\t${newCode}\n\n\t\t\thtml = function () {};\n\t\t`;\n\t}\n\n\tconst combinedCode = `${allCode}\\n${newCode}`;\n\n\treturn combinedCode;\n}\n\n/**\n * Read the name of a Codebook block's set.\n */\nfunction _getSetName($block: HTMLElement): string {\n\tlet setName = $block.getAttribute(dataAttributes.set);\n\n\tif (!setName) {\n\t\tconst $parent = $block.closest(selectors.set);\n\n\t\tif ($parent) {\n\t\t\tsetName = $parent.getAttribute(dataAttributes.set);\n\t\t}\n\n\t\tif (!setName) {\n\t\t\tsetName = defaultSetName;\n\t\t}\n\t}\n\n\treturn setName;\n}\n\n/**\n * A helper function used to create the special `log` function, allowing values inside\n * Codebook blocks to be logged to that block's log element.\n */\nfunction _logOutput($log: HTMLElement, ...output: any[]) {\n\tif ($log) {\n\t\toutput.forEach((outputEl) => {\n\t\t\tlet outputString: string;\n\n\t\t\tif (outputEl instanceof Date) {\n\t\t\t\tfunction padZeroes(num: number, minLength = 2): string {\n\t\t\t\t\tlet numStr = num.toString();\n\n\t\t\t\t\twhile (numStr.length < minLength) {\n\t\t\t\t\t\tnumStr = `0${numStr}`;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn numStr;\n\t\t\t\t}\n\n\t\t\t\tconst year = outputEl.getFullYear();\n\t\t\t\tconst month = padZeroes(outputEl.getMonth() + 1);\n\t\t\t\tconst day = padZeroes(outputEl.getDate());\n\n\t\t\t\toutputString = `${year}-${month}-${day}`;\n\n\t\t\t\tif (outputEl.getHours() || outputEl.getMinutes() || outputEl.getSeconds()) {\n\t\t\t\t\tconst hours = padZeroes(outputEl.getHours());\n\t\t\t\t\tconst minutes = padZeroes(outputEl.getMinutes());\n\t\t\t\t\tconst seconds = padZeroes(outputEl.getSeconds());\n\t\t\t\t\toutputString += ` ${hours}:${minutes}:${seconds}`;\n\t\t\t\t}\n\t\t\t} else if (typeof outputEl === 'object') {\n\t\t\t\toutputString = JSON.stringify(outputEl, null, '\\t');\n\t\t\t} else if (typeof outputEl === 'string') {\n\t\t\t\toutputString = outputEl;\n\t\t\t} else {\n\t\t\t\t// Can't rely on everything having a `toString` method, so use type coercion.\n\t\t\t\toutputString = '' + outputEl;\n\t\t\t}\n\n\t\t\t$log.innerHTML += `${outputString}\\n`;\n\t\t});\n\t}\n}\n\n/**\n * A helper function used to create the special `html` function, allowing values inside\n * Codebook blocks to be logged to that block's html element.\n */\nfunction _htmlOutput($html: HTMLElement, output: string) {\n\tif ($html) {\n\t\t$html.innerHTML = output;\n\t}\n}\n\n/**\n * Decode HTML entities in a string by applying it as the value\n * of an HTMLTextAreaElement then reading it back again.\n */\nfunction _decodeHtml(htmlString: string): string {\n\t// We don't want to see things like =&gt; in code when we really mean =>\n\t$textarea.innerHTML = htmlString;\n\n\tconst decodedString = $textarea.value;\n\n\treturn decodedString;\n}\n","// Using import from '/filename', Webpack will\n// bundle files from outside the docs directory\n// even though it is the root for the server\n// both locally and on GitHub Pages\n\nimport * as codebook from '@cipscis/codebook';\n\ncodebook.tidy();\n\ncodebook.run({\n\ttestArg: 'test',\n});\n\ndocument.querySelector('.js-run-test-set')?.addEventListener('click', () => codebook.runSet('test', { testArg: 'test' }));\ndocument.querySelector('.js-run-all-sets')?.addEventListener('click', () => codebook.run({ testArg: 'test' }));\n"],"names":["selectors","Object","freeze","block","set","inert","dataAttributes","index","log","html","defaultSetName","$textarea","document","createElement","run","args","Promise","resolve","reject","sets","_createCodeSets","promises","setName","push","_runSet","all","then","catch","$blocks","querySelectorAll","setNames","$block","_getSetName","includes","_createNewSet","blocks","_gatherSetBlocks","sort","$blockA","$blockB","iA","getAttribute","iB","assign","code","reduce","_combineCode","logId","$log","getElementById","innerHTML","_clearLogs","argNames","argValues","keys","values","_spreadArgs","console","Error","Function","apply","concat","_logOutput","_htmlOutput","fn","allCode","$newCode","newCode","htmlString","textContent","value","htmlId","$parent","closest","output","forEach","outputEl","outputString","Date","padZeroes","num","minLength","numStr","toString","length","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","JSON","stringify","$html","match","level","pattern","RegExp","replace","trim","testArg","querySelector","addEventListener","async","setNameOrArgs","argsParam","RangeError"],"sourceRoot":""}